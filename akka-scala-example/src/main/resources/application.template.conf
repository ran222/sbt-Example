#####################################
# Akka 远程调用参考配置文件 #
#####################################

# 本参考配置文件包含所有的缺省配置.
# 在你自己的 application.conf 可对其进行编辑/重写.

# 关于akka-actor.jar 中已有的akka.actor设置的注释被去掉了, 不然会发生重复设置.

akka {

  actor {

    serializers {
      proto = "akka.serialization.ProtobufSerializer"
    }


    serialization-bindings {
      # 由 com.google.protobuf.Message 没有继承 Serializable 但 GeneratedMessage
      # 有, 这里必须使用更明确的类来避免歧义
      "com.google.protobuf.GeneratedMessage" = proto
    }

    deployment {

      default {

        # 如果设置为一个可用的远程地址, 这个有名称的actor会被部署到那个结点
        # e.g. "akka://sys@host:port"
        remote = ""

        target {

          # 一个主机名和端口列表，用来创建一个非直接路由actor的子actor
          #   格式应为 "akka://sys@host:port", 其中:
          #    - sys 是远程actor系统的名称
          #    - hostname 可以是主机名或远程主机应连接到的IP地址
          #    - port 应为其它结点上的远程服务的端口
          # 象本地路由actor一样，新生成的actor实例的数量仍从
          # nr-of-instances 配置中获取; 新的实例在给定的结点中将以
          # round-robin 的方式分布
          nodes = []

        }
      }
    }
  }

  remote {

    # 使用 akka.remote.RemoteTransport 的哪个实现
    # 缺省是基于TCP，Netty上的远程传输层
    transport = "akka.remote.netty.NettyRemoteTransport"

    # 打开为服务器管理的actor的完全的安全性打开不信任模式, 允许不受信任的
    # 客户端建立连接.
    untrusted-mode = off

    # 集群操作的 ACK 超时, 例如检查 actor 等.
    remote-daemon-ack-timeout = 30s

    # 如果这个值是 "on", Akka 会以DEBUG级别记录所有接收到的消息到日志, 如果是 off 则不会被记录
    log-received-messages = off

    # 如果这个值是 "on", Akka 会以DEBUG级别记录所有发送的消息到日志，如果是 off 则不会被记录
    log-sent-messages = off

    # 每一个属性被标记为 (I) 或 (O) 或 (I&O), I 代表 “输入”  O 代表 “输出” 连接.
    # NettyRemoteTransport 启动的服务器总是允许输入的连接, 当发送到某个尚未连接的目标时总是会启动活跃的客户端连接
    # ; 如果配置指定，它可以重用输入的连接来发送应答，这被称为被动客户端连接
    #  (i.e. 从服务器到客户端).
    netty {

      # (O) 在延迟变长/溢出的情况下要等待多久 (阻塞发送方)
      # 才取消发送
      # 0 表示 "不取消", 任何正数表示最长的阻塞时间.
      backoff-timeout = 0ms

      # (I&O) 用 '$AKKA_HOME/scripts/generate_config_with_secure_cookie.sh' 创建自己cookie
      # 或使用 'akka.util.Crypt.generateSecureCookie'
      secure-cookie = ""

      # (I) 远程服务器是否要求连接对方也共享同样的 secure-cookie
      # (在 'remote' 部分定义)?
      require-cookie = off

      # (I) 重用输入连接来发送消息
      use-passive-connections = on

      # (I) 远程调用所绑定的主机名或ip,
      # 不设则使用InetAddress.getLocalHost.getHostAddress
      hostname = ""

      # (I) 客户端应连接到的缺省远程服务器端口.
      # 缺省值为 2552 (AKKA), 0 表示随机选择一个可用端口
      port = 2552

      # (O) 创建输出连接时绑定到的本地网络接口地址 (IP 地址)
      # 设置为 "" 或 "auto" 表示自动选择本地地址.
      outbound-local-address = "auto"

      # (I&O) 如果你希望发送内容较大的消息则设置这个参数
      message-frame-size = 1 MiB

      # (O) 超时间隔
      connection-timeout = 120s

      # (I) 储备连接的大小
      backlog = 4096

      # (I) 核心线程空闲时保持存活的时间长度，以 akka.time-unit 为单位
      execution-pool-keepalive = 60s

      # (I) 远程执行单元的核心池的大小
      execution-pool-size = 4

      # (I) channel 大小的上限, 0 表示关闭
      max-channel-memory-size = 0b

      # (I) 所有channel总大小的上限, 0 表示关闭
      max-total-memory-size = 0b

      # (O) 活跃客户端重连的间隔
      reconnect-delay = 5s

      # (O) 读非活跃时间 (最小单位为秒)
      # 经过这么长时间后，活跃客户端将被关闭;
      # 当有新的通信请求时将被重新建立.
      # 0表示关闭这个功能
      read-timeout = 0s

      # (O) 写非活跃时间 (最小单位为秒)
      # 经过这么长时间后将发送心跳.
      # 0表示关闭这个功能
      write-timeout = 10s

      # (O) 读和写的非活跃时间 (最小单位为秒)
      # 经过这么长时间后活跃客户端连接将被关闭;
      # 当有新的通信请求时将被重新建立
      # 0表示关闭这个功能
      all-timeout = 0s

      # (O) 客户端应进行重连的最大时间窗口
      reconnection-time-window = 600s
    }

    # 系统 actor "network-event-sender" 所使用的派发器
    network-event-sender-dispatcher {
      executor = thread-pool-executor
      type = PinnedDispatcher
    }
  }
}